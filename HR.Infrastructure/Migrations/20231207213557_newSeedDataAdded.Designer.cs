// <auto-generated />
using System;
using HR.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR.Persistence.Migrations
{
    [DbContext(typeof(HRContext))]
    [Migration("20231207213557_newSeedDataAdded")]
    partial class newSeedDataAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HR.Domain.Concrete.AdvancePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AdvanceType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.ToTable("AdvancePayments");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf49e202-9783-4641-961b-f2cc2102f992"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1261),
                            IsActive = true,
                            Name = "AR-GE"
                        },
                        new
                        {
                            Id = new Guid("7761c3a6-2c96-4f0b-ae42-f2d6bb2510ec"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1285),
                            IsActive = true,
                            Name = "İnsan Kaynakları"
                        },
                        new
                        {
                            Id = new Guid("387a5419-0f4f-4be4-9f93-d86d3e43a61b"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1287),
                            IsActive = true,
                            Name = "Finans"
                        },
                        new
                        {
                            Id = new Guid("a674174f-67d4-46ec-b583-60ba2348c36d"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1290),
                            IsActive = true,
                            Name = "Pazarlama"
                        },
                        new
                        {
                            Id = new Guid("ff6ad11f-6705-41e8-9af7-b9cc51f08997"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1292),
                            IsActive = true,
                            Name = "Satış"
                        },
                        new
                        {
                            Id = new Guid("a6c0f5b4-bde3-424e-8617-05a4a09c2ded"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1297),
                            IsActive = true,
                            Name = "Üretim ve Operasyon"
                        },
                        new
                        {
                            Id = new Guid("4c83e14f-cea4-4d7f-82e4-d9d925e705d7"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1299),
                            IsActive = true,
                            Name = "Müşteri Hizmetleri"
                        },
                        new
                        {
                            Id = new Guid("6bfa0e4c-469a-4ae0-815c-14c2e90991e8"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1301),
                            IsActive = true,
                            Name = "Bilişim Teknolojileri"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Expenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ExpenditureTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpenditureTypeId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Expenditures");
                });

            modelBuilder.Entity("HR.Domain.Concrete.ExpenditureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpenditureTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e81a881-eb16-4bb8-8d34-a52ace034d2b"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1445),
                            IsActive = true,
                            MaxAmount = 5000m,
                            MinAmount = 100m,
                            Name = "Seyahat"
                        },
                        new
                        {
                            Id = new Guid("d1243c44-8410-4dab-9cba-902fee5d80f8"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1451),
                            IsActive = true,
                            MaxAmount = 1500m,
                            MinAmount = 100m,
                            Name = "Gıda"
                        },
                        new
                        {
                            Id = new Guid("ab583ab5-b234-4bfb-88bf-50776f2921f4"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1454),
                            IsActive = true,
                            MaxAmount = 3000m,
                            MinAmount = 50m,
                            Name = "Ulaşım"
                        },
                        new
                        {
                            Id = new Guid("1d064fe6-b715-4997-a602-c8a7baebe743"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1459),
                            IsActive = true,
                            MaxAmount = 6000m,
                            MinAmount = 50m,
                            Name = "Sağlık"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.Role.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5825836e-00e2-416f-822f-86136cde710f"),
                            ConcurrencyStamp = "e3f056b5-d897-4820-919d-7d0bff4921e7",
                            Name = "Personnel",
                            NormalizedName = "PERSONNEL"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea726d61-b84b-403a-b43b-b7cf18a1a34e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a33c4945-557c-4fb5-8eec-d551a8893335",
                            Email = "betul.demir@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Betül",
                            NormalizedEmail = "BETUL.DEMIR@BILGEADAMBOOST.COM",
                            NormalizedUserName = "BETULDEMIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqrZUgRI4UXEjP3oc+cwNqTss0ZiWuySpDApVOTNNrE6R3p+tfzG+1TrR+/6ds1qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e320242e-17d8-4170-8c4a-a8e7b5dd0e5a",
                            Surname = "Demir",
                            TwoFactorEnabled = false,
                            UserName = "betuldemir"
                        },
                        new
                        {
                            Id = new Guid("e09be003-b8c6-4cfa-b25d-8b8979f8e27f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0861097-32c6-4b4c-9ddf-2ed59d135a9a",
                            Email = "muhammet.coskun@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Muhammet",
                            NormalizedEmail = "MUHAMMET.COSKUN@BILGEADAMBOOST.COM",
                            NormalizedUserName = "MUHAMMETCOSKUN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFvCkR8zNpSD82XYbjmbeyUuy2xK7LpyPtSMcmABQw8yaRo6HTMGOahZ3E4LX7pApw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89304455-0076-4e1f-94f3-89455ea96256",
                            Surname = "Coşkun",
                            TwoFactorEnabled = false,
                            UserName = "muhammetcoskun"
                        },
                        new
                        {
                            Id = new Guid("5d9dc533-5519-4cf3-b1b2-82260cad1bb4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7de3dd85-5ce1-4fde-b3c8-4819a4244ee3",
                            Email = "mehmetali.mert@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Mehmet Ali",
                            NormalizedEmail = "MEHMETALI.MERT@BILGEADAMBOOST.COM",
                            NormalizedUserName = "MEHMETALIMERT",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPUgTeK8uaMLZZKf0iUGSI5JNx8a889OcjtN2qHG/ja9OqfEwr5Q5nKtsFhKCPjhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8636a0ae-a6ea-45f1-a375-2392d89dfb3a",
                            Surname = "Mert",
                            TwoFactorEnabled = false,
                            UserName = "mehmetalimert"
                        },
                        new
                        {
                            Id = new Guid("4fccba9a-496d-4bb0-818b-7bf19cb3e543"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7d588fd-db33-4001-825d-c745fdb5921a",
                            Email = "abdulkadir.oztuzcu@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Abdülkadir",
                            NormalizedEmail = "ABDULKADIR.OZTUZCU@BILGEADAMBOOST.COM",
                            NormalizedUserName = "ABDULKADIROZTUZCU",
                            PasswordHash = "AQAAAAEAACcQAAAAEKnwCQoKlsXGuWSSHC20eir8eDcnQE+eLzhqlLxaa8YbiY4gL6uhqZZUpLvipVZVWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce305733-c7e4-4d53-909a-55f6a32f5866",
                            Surname = "Öztuzcu",
                            TwoFactorEnabled = false,
                            UserName = "abdulkadiroztuzcu"
                        },
                        new
                        {
                            Id = new Guid("f2e6e6e1-979a-4a05-8422-12665cb4eba5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87066479-4322-46ff-bbb9-29e9450b4cdb",
                            Email = "furkan.umman@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Furkan",
                            NormalizedEmail = "FURKAN.UMMAN@BILGEADAMBOOST.COM",
                            NormalizedUserName = "FURKANUMMAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEACgdguXF3Mi2uRe1V3j6ztscwC6jW2sUKHwa+qgflW/cgEFLxDuNOS9I0+s+O8v/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bc4ecfe-5923-4db8-a461-233fe9fdb2f2",
                            Surname = "Umman",
                            TwoFactorEnabled = false,
                            UserName = "furkanumman"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34301f2e-1dd3-422d-8946-11fdfd6ac58f"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1358),
                            IsActive = true,
                            Name = "Yazılım Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("9ee5616a-c13d-4d99-8953-178058e93536"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1364),
                            IsActive = true,
                            Name = "FrontEnd Geliştici"
                        },
                        new
                        {
                            Id = new Guid("1a724d72-f2aa-45c8-b22d-ce3e9f871dd8"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1367),
                            IsActive = true,
                            Name = "BackEnd Geliştici"
                        },
                        new
                        {
                            Id = new Guid("3b184833-8c3d-4f97-a46c-fa326249ba68"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1369),
                            IsActive = true,
                            Name = "İnşaat Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("9edb4bc0-969d-49f9-a752-0c14576ab74c"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1372),
                            IsActive = true,
                            Name = "Endüstri Mühendisi"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Days")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PermissionRequests");
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Days")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed03ba1f-253c-4d8a-b8d5-26c4268c1484"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1407),
                            IsActive = true,
                            Name = "Yıllık İzin"
                        },
                        new
                        {
                            Id = new Guid("8ba143ca-5ef7-42bd-b4b5-0c419903f48d"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1411),
                            Days = 5f,
                            IsActive = true,
                            Name = "Babalık İzni"
                        },
                        new
                        {
                            Id = new Guid("4b7018c2-a031-4da5-a32b-010169e4bc1b"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1414),
                            Days = 3f,
                            IsActive = true,
                            Name = "Evlilik İzni"
                        },
                        new
                        {
                            Id = new Guid("35040a1a-4e5f-438e-8eba-af2e82dfd1ae"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1417),
                            Days = 112f,
                            IsActive = true,
                            Name = "Doğum İzni"
                        },
                        new
                        {
                            Id = new Guid("6262bbcc-c007-4a95-8194-d70d8477a25b"),
                            CreatedDate = new DateTime(2023, 12, 8, 0, 35, 57, 220, DateTimeKind.Local).AddTicks(1422),
                            Days = 3f,
                            IsActive = true,
                            Name = "Ölüm İzni"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<float?>("AnnualPermissionDays")
                        .HasColumnType("real");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FireDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("HireDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<string>("PlaceofBirth")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Concrete.AdvancePayment", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Expenditure", b =>
                {
                    b.HasOne("HR.Domain.Concrete.ExpenditureType", "ExpenditureType")
                        .WithMany("Expenditures")
                        .HasForeignKey("ExpenditureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenditureType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionRequest", b =>
                {
                    b.HasOne("HR.Domain.Concrete.PermissionType", "PermissionType")
                        .WithMany("PermissionRequests")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany("PermissonRequests")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Department", "Department")
                        .WithMany("People")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Job", "Job")
                        .WithMany("People")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Identity.User", "User")
                        .WithMany("Personnels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.Role.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.Role.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Concrete.Department", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HR.Domain.Concrete.ExpenditureType", b =>
                {
                    b.Navigation("Expenditures");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.User", b =>
                {
                    b.Navigation("Personnels");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Job", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionType", b =>
                {
                    b.Navigation("PermissionRequests");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("PermissonRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
