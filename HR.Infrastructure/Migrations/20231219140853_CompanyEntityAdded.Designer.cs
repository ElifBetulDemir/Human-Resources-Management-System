// <auto-generated />
using System;
using HR.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR.Persistence.Migrations
{
    [DbContext(typeof(HRContext))]
    [Migration("20231219140853_CompanyEntityAdded")]
    partial class CompanyEntityAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HR.Domain.Concrete.AdvancePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AdvanceType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.ToTable("AdvancePayments");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b337e904-5b62-4ded-aeba-2849b5ee6a6a"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5264),
                            IsActive = true,
                            Name = "AR-GE"
                        },
                        new
                        {
                            Id = new Guid("09c4266e-a00b-4eca-9867-e06be428c276"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5281),
                            IsActive = true,
                            Name = "İnsan Kaynakları"
                        },
                        new
                        {
                            Id = new Guid("7dbce314-58d6-4088-9105-f72be5db5277"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5285),
                            IsActive = true,
                            Name = "Finans"
                        },
                        new
                        {
                            Id = new Guid("50519ef4-fb44-4bdc-8f5e-3d083fe820d2"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5293),
                            IsActive = true,
                            Name = "Pazarlama"
                        },
                        new
                        {
                            Id = new Guid("efeb73d4-0848-4d1f-bd07-09d4aace1606"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5297),
                            IsActive = true,
                            Name = "Satış"
                        },
                        new
                        {
                            Id = new Guid("91e0036e-04b0-415b-85d8-c39b5459c6e9"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5300),
                            IsActive = true,
                            Name = "Üretim ve Operasyon"
                        },
                        new
                        {
                            Id = new Guid("804159ef-b9ea-4454-94f7-6733818a0a61"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5303),
                            IsActive = true,
                            Name = "Müşteri Hizmetleri"
                        },
                        new
                        {
                            Id = new Guid("7dd1bfdd-3e9e-475d-a26c-934c61a775bb"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5309),
                            IsActive = true,
                            Name = "Bilişim Teknolojileri"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Expenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ExpenditureTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpenditureTypeId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Expenditures");
                });

            modelBuilder.Entity("HR.Domain.Concrete.ExpenditureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpenditureTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a766738-a620-4845-a4de-5e14c2b74d22"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5472),
                            IsActive = true,
                            MaxAmount = 5000m,
                            MinAmount = 100m,
                            Name = "Seyahat"
                        },
                        new
                        {
                            Id = new Guid("48311c92-89b2-4821-b66f-41741d8c6b92"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5483),
                            IsActive = true,
                            MaxAmount = 1500m,
                            MinAmount = 100m,
                            Name = "Gıda"
                        },
                        new
                        {
                            Id = new Guid("c9daea26-516b-46e0-b22c-6e6d79d47df6"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5487),
                            IsActive = true,
                            MaxAmount = 3000m,
                            MinAmount = 50m,
                            Name = "Ulaşım"
                        },
                        new
                        {
                            Id = new Guid("ed6d0b2f-ae17-41be-bc14-8d23540949a2"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5490),
                            IsActive = true,
                            MaxAmount = 6000m,
                            MinAmount = 50m,
                            Name = "Sağlık"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.Role.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b92c529-f02a-4268-8c30-51142deaa9b3"),
                            ConcurrencyStamp = "3525fffb-e24f-4c65-8929-8c549358159d",
                            Name = "Personnel",
                            NormalizedName = "PERSONNEL"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8b6c033-5237-4652-9e76-9b4e5ff813ad"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8441514-3aa5-4a9a-a2ff-f1d05115cf0a",
                            Email = "betul.demir@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Betül",
                            NormalizedEmail = "BETUL.DEMIR@BILGEADAMBOOST.COM",
                            NormalizedUserName = "BETULDEMIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEJszPS6H03/0mP3SiIIEHomjSD0LwImpDECcPg7QlJaFeQE5cMmZXOypBJitk3wJbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b0deb8-4d62-4b33-ae89-de6a08512198",
                            Surname = "Demir",
                            TwoFactorEnabled = false,
                            UserName = "betuldemir"
                        },
                        new
                        {
                            Id = new Guid("0125621a-0684-4294-9ebb-c96352a78650"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e84ce9ed-f65c-4e98-9387-1c50116748e1",
                            Email = "muhammet.coskun@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Muhammet",
                            NormalizedEmail = "MUHAMMET.COSKUN@BILGEADAMBOOST.COM",
                            NormalizedUserName = "MUHAMMETCOSKUN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFpX702z4uPwdKFI0DgFa5kKmnfBRbX2BL06jpvyPcn7onSbutt2PEuXfVa9Kb1rCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "731a82da-3574-454a-a026-4f5f2120ba74",
                            Surname = "Coşkun",
                            TwoFactorEnabled = false,
                            UserName = "muhammetcoskun"
                        },
                        new
                        {
                            Id = new Guid("31edbc4e-615b-4057-aed1-268b38e09c10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bfe69fb-f3b5-4303-868d-c6e57c391e91",
                            Email = "mehmetali.mert@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Mehmet Ali",
                            NormalizedEmail = "MEHMETALI.MERT@BILGEADAMBOOST.COM",
                            NormalizedUserName = "MEHMETALIMERT",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnjd1Js+PUCTdZav6ItTMSHF+1yw/0ZEFhpHiRJrq4TyHwr7bMiRtIFjm4Nxb81lQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beb33c42-da08-4f62-958e-bd1e42887e51",
                            Surname = "Mert",
                            TwoFactorEnabled = false,
                            UserName = "mehmetalimert"
                        },
                        new
                        {
                            Id = new Guid("69adb5cd-7e39-48f6-82cf-ee9f8c8ac6c4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1fb925f-b7b9-4029-9201-11c77b8c7962",
                            Email = "abdulkadir.oztuzcu@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Abdülkadir",
                            NormalizedEmail = "ABDULKADIR.OZTUZCU@BILGEADAMBOOST.COM",
                            NormalizedUserName = "ABDULKADIROZTUZCU",
                            PasswordHash = "AQAAAAEAACcQAAAAEGNAsu9ZHASL1z6GjumtT7iGDz2GL7Ckxjnpu5ohP+tA3Bu26ybzX1wrJz+P2KLvEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0815049e-a93d-4a49-9318-da774138aacd",
                            Surname = "Öztuzcu",
                            TwoFactorEnabled = false,
                            UserName = "abdulkadiroztuzcu"
                        },
                        new
                        {
                            Id = new Guid("51207994-c920-443d-bf59-4370d511fc64"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f89b2d7-69c3-408b-acb8-1b36c09f62e3",
                            Email = "furkan.umman@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Furkan",
                            NormalizedEmail = "FURKAN.UMMAN@BILGEADAMBOOST.COM",
                            NormalizedUserName = "FURKANUMMAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1APZgo7ov/JFpzKEWIzxME5rVmGatdfSfGCFkQ8Gpu+JTiUoSxnm8gVFKlxpWmrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5652ce4e-000c-4ea2-b1fc-b14106864141",
                            Surname = "Umman",
                            TwoFactorEnabled = false,
                            UserName = "furkanumman"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a10960a8-b3aa-4b81-8eaa-f831608f01ab"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5364),
                            IsActive = true,
                            Name = "Yazılım Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("8a298b15-facf-49dc-82ae-685a1d6d942e"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5369),
                            IsActive = true,
                            Name = "FrontEnd Geliştici"
                        },
                        new
                        {
                            Id = new Guid("be64ce52-b9f0-4881-aaf2-5637480f1f43"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5372),
                            IsActive = true,
                            Name = "BackEnd Geliştici"
                        },
                        new
                        {
                            Id = new Guid("ffebe8fc-f063-4acf-a23f-218b8f3c9b50"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5378),
                            IsActive = true,
                            Name = "İnşaat Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("63a7f57b-2f55-4218-bbe3-415ce74f14f7"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5381),
                            IsActive = true,
                            Name = "Endüstri Mühendisi"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ApprovalStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Days")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PermissionRequests");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Permissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Days")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d127b2d9-edb1-473e-b19b-9621a30ea5d4"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5419),
                            IsActive = true,
                            Name = "Yıllık İzin"
                        },
                        new
                        {
                            Id = new Guid("e828a8d7-5d5e-4db2-bff6-089f741f24c3"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5426),
                            Days = 5f,
                            IsActive = true,
                            Name = "Babalık İzni"
                        },
                        new
                        {
                            Id = new Guid("3cb501df-cd5a-4e1c-9ce8-82a34130a566"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5432),
                            Days = 3f,
                            IsActive = true,
                            Name = "Evlilik İzni"
                        },
                        new
                        {
                            Id = new Guid("7f5be4b4-edf7-425b-861f-b1e8c8262834"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5436),
                            Days = 112f,
                            IsActive = true,
                            Name = "Doğum İzni"
                        },
                        new
                        {
                            Id = new Guid("91001820-e2c6-4161-a452-2183d4c0b727"),
                            CreatedDate = new DateTime(2023, 12, 19, 17, 8, 52, 458, DateTimeKind.Local).AddTicks(5440),
                            Days = 3f,
                            IsActive = true,
                            Name = "Ölüm İzni"
                        });
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<float?>("AnnualPermissionDays")
                        .HasColumnType("real");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FireDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("HireDate")
                        .HasMaxLength(15)
                        .HasColumnType("date");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<string>("PlaceofBirth")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR.Domain.Concrete.AdvancePayment", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Department", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Company", null)
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Expenditure", b =>
                {
                    b.HasOne("HR.Domain.Concrete.ExpenditureType", "ExpenditureType")
                        .WithMany("Expenditures")
                        .HasForeignKey("ExpenditureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenditureType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.PermissionRequest", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Permissions", "PermissionType")
                        .WithMany("PermissionRequests")
                        .HasForeignKey("PermissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Personnel", "Personnel")
                        .WithMany("PermissonRequests")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Company", "Company")
                        .WithMany("Personnel")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Department", "Department")
                        .WithMany("People")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Job", "Job")
                        .WithMany("People")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Identity.User", "User")
                        .WithMany("Personnels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.Role.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.Role.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HR.Domain.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Domain.Concrete.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Department", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HR.Domain.Concrete.ExpenditureType", b =>
                {
                    b.Navigation("Expenditures");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Identity.User", b =>
                {
                    b.Navigation("Personnels");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Job", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Permissions", b =>
                {
                    b.Navigation("PermissionRequests");
                });

            modelBuilder.Entity("HR.Domain.Concrete.Personnel", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("PermissonRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
